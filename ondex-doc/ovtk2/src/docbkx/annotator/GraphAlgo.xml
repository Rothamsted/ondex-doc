<sect1 id="Annotator.GraphAlgo">
	<title>Graph Algorithms</title>
	<para>
		There are five algorithms to choose from at the moment. They do
		not change the visualisation of the graph. They add an attribute to
		each concept which can then be used to change the visualisation of the
		graph (e.g. "Colour Concepts by General Attribute", see example).
	</para>
	<para>
		The descriptions and implementation of the following graph algorithms
		are taken from a book by Hang T. Lau entitled
		<ulink url="http://www.crcpress.com/product/isbn/9781584887188">
			<citetitle>
				"A Java Library of Graph Algorithms and Optimization
				(Discrete Mathematics and Its Applications)"
			</citetitle>
		</ulink>
		.
		<itemizedlist>
			<listitem>
				<para>
					All Cliques:
				</para>
				<para>
					A clique is a complete subgraph of a given undirected graph G.
					A k-clique is a clique of order k. An independent set is a subset
					of nodes of G such that no two nodes of the set are adjacent in G.
					An independent set is maximal if there is no other independent set
					that contains it.
					Since a subset of nodes S of a graph G is a
					maximal independent set if and only if S is a clique in the
					complement of G, any algorithm which finds the maximal independent
					sets of a graph can also be used to find its cliques, and vice
					versa.
				</para>
			</listitem>
			<listitem>
				<para>
					Connected Components:
				</para>
				<para>
					A connected component is a maximally connected subgraph.
				</para>
			</listitem>
			<listitem>
				<para>
					Cut Nodes:
				</para>
				<para>
					An undirected graph that is not connected can be divided into
					connected components. A connected graph consists of one single
					component. A cut node of a component is a node whose removal will
					disconnect the component.
				</para>
			</listitem>
			<listitem>
				<para>
					Minimal Equivalent:
				</para>
				<para>
					The minimal equivalent graph problem is to find a directed
					subgraph H from a given strongly connected graph G by removing the
					maximum number of edges from G without affecting its reachability
					properties.
				</para>
			</listitem>
			<listitem>
				<para>
					Strongly Connected:
				</para>
				<para>
					A strongly connected component of a directed graph is a
					maximal set of nodes in which there is a directed path from any one
					node in the set to any other node in the set.
				</para>
			</listitem>
		</itemizedlist>
	</para>
	<para>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata align="center" fileref="../images/annotator/annotator_graphAlgo1.png" />
				</imageobject>
			</mediaobject>
		</screenshot>
	</para>
	<para>
		After clicking on Annotate Graph
	</para>
	<para>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata align="center" fileref="../images/annotator/annotator_graphAlgo2.png" />
				</imageobject>
			</mediaobject>
		</screenshot>
	</para>
	<para>
		In the example above, the maximally connected subgraphs are
		obvious. After running the "Connected Components" annotator, a new
		attribute is added to concepts. It is then possible to pick that
		attribute in the "Colour Concepts by General Attribute" annotator. The
		screenshot below shows the results:
	</para>
	<para>
		<screenshot>
			<mediaobject>
				<imageobject>
					<imagedata align="center" fileref="../images/annotator/annotator_graphAlgo3.png" />
				</imageobject>
			</mediaobject>
		</screenshot>
	</para>
</sect1>